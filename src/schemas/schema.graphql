# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  currentUser: User
  listBlogsWithCatTag: [PopulatedCardBlog!]!
  getBlogBySlug(slug: String!): PopulatedBlog!
  getBlogById(blogId: String!): PopulatedBlog!
  searchBlogs(query: String!): [PopulatedCardBlog!]!
  getRelatedBlogs(limit: Float, tagIds: [String!]!, catIds: [String!]!, slug: String!): [PopulatedCardBlog!]!
  getUserBlogs(username: String, userId: String): [PopulatedBlog!]!
  getUserLikedBlogs(username: String): [PopulatedBlog!]!
  listCats: [Category!]!
  getCatBlogs(slug: String!): [Blog!]!
  getUserInfo(username: String!): UserInfoResponse!
  searchUsers(name: String!): [User!]
  getFollowInfo(username: String): FollowInfo
  listTags: [Tag!]!
  getTagBlogs(slug: String!): [Blog!]!
  conversations: [Conversation!]!
  messages(conversationId: String!): [Message!]!
  blogComments(blogId: String!): [Comment!]!
}

type User {
  _id: ObjectId!
  username: String!
  name: String!
  email: String!
  profile: String!
  about: String
  role: String!
  photo: String
  resetPasswordLink: String
  commented: [Comment!]!
  likedBlogs: [Blog!]!
  followings: [User!]!
  followers: [User!]!
  followingIds: [String!]!
  followerIds: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime
}

"""Mongo object id scalar type"""
scalar ObjectId

type Comment {
  _id: ObjectId!
  content: String!
  by: User!
  atBlog: Blog
  replyTo: Comment
  replies: [Comment!]!
  createdAt: DateTime!
  updatedAt: DateTime
}

type Blog {
  _id: ObjectId!
  title: String!
  slug: String!
  description: String!
  body: String!
  mtitle: String!
  imageUri: String
  active: Boolean
  likedBy: [User!]
  comments: [Comment!]
  categories: [Category!]!
  tags: [Tag!]!
  author: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Category {
  _id: ObjectId!
  name: String!
  slug: String!
}

type Tag {
  _id: ObjectId!
  name: String!
  slug: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type PopulatedCardBlog {
  _id: String!
  title: String!
  slug: String!
  imageUri: String
  author: PopulatedUser!
  tags: [PopulatedTag!]!
  description: String!
  createdAt: DateTime!
}

type PopulatedUser {
  _id: String!
  name: String!
  username: String
  photo: String!
  profile: String!
}

type PopulatedTag {
  _id: String!
  slug: String!
  name: String!
}

type PopulatedBlog {
  _id: String!
  title: String!
  slug: String!
  description: String!
  body: String!
  mtitle: String!
  imageUri: String
  active: Boolean
  likedBy: [PopulatedUser!]
  comments: [PopulatedComment!]
  categories: [PopulatedCategory!]
  tags: [PopulatedTag!]
  author: PopulatedUser!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PopulatedComment {
  _id: String!
  content: String!
  by: PopulatedUser!
  atBlog: PopulatedBlog!
}

type PopulatedCategory {
  _id: String!
  slug: String!
  name: String!
}

type UserInfoResponse {
  _id: String!
  username: String!
  name: String!
  email: String!
  about: String!
  photo: String!
  createdAt: DateTime!
}

type FollowInfo {
  followers: [User!]!
  followings: [User!]!
}

type Conversation {
  _id: ObjectId!
  participants: [Participant!]!
  participantUserIds: [String!]!
  messages: [Message!]!
  latestMessage: Message
  latestMessageId: String
  createdAt: DateTime
  updatedAt: DateTime!
}

type Participant {
  _id: ObjectId!
  user: User!
  userId: String!
  conversation: Conversation!
  conversationId: String!
  hasSeenLatestMessage: Boolean!
}

type Message {
  _id: ObjectId!
  body: String!
  sender: User!
  senderId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Mutation {
  register(password: String!, email: String!, name: String!): String!
  login(password: String!, email: String!): LoginResponse!
  refreshToken(refreshToken: String!): LoginResponse!
  logout: Boolean!
  forgotPassword(email: String!): String!
  resetPassword(password: String!, username: String!): Boolean!
  revokeRefreshTokensForUser(userId: String!): Boolean!
  createBlog(tagIds: [String!], blogInput: BlogInput!): NewBlogResponse!
  updateBlog(tagIds: [String!], blogInput: BlogInput!, blogId: String!): NewBlogResponse!
  deleteBlogById(blogId: String!): Boolean!
  newCat(catName: String!): Boolean!
  deleteCat(id: String!): Boolean!
  follow(followName: String!): Boolean!
  unFollow(name: String!): Boolean!
  editProfile(about: String, photo: String, email: String, name: String): Boolean!
  newTag(tagName: String!): Boolean!
  deleteTag(id: String!): Boolean!
  createConversation(participantUserIds: [String!]!): String!
  markConversationAsRead(conversationId: String!, userId: String!): Boolean!
  deleteConversation(conversationId: String!): Boolean!
  updateParticipants(participantIds: [String!]!, conversationId: String!): Boolean!
  sendMessage(conversationId: String!, senderId: String!, body: String!): Boolean!
  toggleLike(blogId: String!): Boolean!
  newComment(blogId: String!, content: String!): Comment!
  replyComment(content: String!, commentId: String!): Comment!
  deleteComment(commentId: String!): Boolean!
}

type LoginResponse {
  ok: Boolean!
  accessToken: String!
  refreshToken: String!
  accessTokenExpiry: Float!
}

type NewBlogResponse {
  success: Boolean!
  blog: PopulatedCardBlog
}

input BlogInput {
  title: String!
  body: String!
  imageUri: String = "https://res.cloudinary.com/hapmoniym/image/upload/v1644331126/bot-thk/no-image_eaeuge.jpg"
  active: Boolean!
}

type Subscription {
  blogPublished(followingIds: [String!]!): Notification!
  userFollowed(name: String!): Notification!
  conversationCreated: PopulatedConversation!
  conversationUpdated: ConversationUpdated!
  conversationDeleted: PopulatedConversation!
  messageSent: Message!
}

type Notification {
  id: ID!
  message: String!
  linkString: String!
  dateString: String!
}

type PopulatedConversation {
  _id: String!
  participants: [PopulatedParticipant!]!
  participantUserIds: [String!]!
  messages: [PopulatedMessage!]!
  createdAt: String!
  updatedAt: String
  latestMessageId: String
  latestMessage: PopulatedMessage
}

type PopulatedParticipant {
  _id: String!
  user: PopulatedUser!
  hasSeenLatestMessage: Boolean!
  userId: String!
}

type PopulatedMessage {
  _id: String!
  body: String!
  sender: PopulatedUser!
  senderId: String!
  createdAt: String!
  updatedAt: String!
}

type ConversationUpdated {
  conversation: PopulatedConversation!
  addedUserIds: [String!]
  removedUserIds: [String!]
}
